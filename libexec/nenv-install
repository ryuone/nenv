#!/usr/bin/env bash
#
# Summary: Install a Node version from git
#
# Usage: nenv install [-f] [-vps] <version>
#        nenv install [-f] [-vps] <definition-file>
#        nenv install -l|--list
#
#   -l/--list          List all available versions
#   -f/--force         Install even if the version appears to be installed already
#   -s/--skip-existing Skip if the version appears to be installed already
#   -v/--verbose       Verbose mode: print compliation status to stdout
#   -p/--patch         Apply a patch from stdin before building

set -e
[[ -n $NENV_DEBUG ]] && set -x

source "${NENV_ROOT}/lib/nenv-functions"

NODE_BUILD_ROOT="$(absolute_dirname "$0")/.."

nenv_installed(){
    local version="$1"
    [ -d "$NENV_ROOT/versions/$version/bin" ] || return 1
}

nenv_remote_versions() {
    curl -so - -L -4 https://iojs.org/dist/index.tab \
      | cut -f 1 | tail -n +2 \
    && \
    curl -so - http://nodejs.org/dist/ \
      | egrep '<a href="v.*/'          \
      | egrep -o '"v[^"]+/'            \
      | tr -d \"/                      \
      | egrep -o '[^v]+'               \
      | sort -V
}

nenv_fetch_tarball(){
    local version="$1"

    local url0="https://iojs.org/dist/v$version/iojs-v$version.tar.gz"
    local url1="http://nodejs.org/dist/node-v$version.tar.gz"
    local url2="http://nodejs.org/dist/v$version/node-v$version.tar.gz"
    local url3="http://nodejs.org/dist/node-$version.tar.gz"
    local url4="http://nodejs.org/dist/$version/node-$version.tar.gz"

    echo "Now getting tarball. Version : ${version}" >&4 2>&1
    pushd "$TEMP_PATH" >&4
    {
        curl -# -L -4 "$url0" \
            | $tar zxf - -C "." --strip-components=1 \
            || curl -# -L "$url1" \
            | $tar zxf - -C "." --strip-components=1 \
            || curl -# -L "$url2" \
            | $tar zxf - -C "." --strip-components=1 \
            || curl -# -L "$url3" \
            | $tar zxf - -C "." --strip-components=1 \
            || curl -# -L "$url4" \
            | $tar zxf - -C "." --strip-components=1
    } >&4 2>&1
    popd >&4
}

nenv_fetch_git(){
    local branch="$1"

    echo "Create git directory : ${NENV_SOURCE_PATH}" >&4 2>&1
    mkdir -p "$NENV_SOURCE_PATH"
    pushd "$NENV_SOURCE_PATH" >&4

    if [ -d "$NENV_SOURCE_PATH/${branch}" ]; then
        echo "Pulling ${git_url}..." >&2
        pushd "$NENV_SOURCE_PATH/${branch}" >&4
        {
            git pull
        } >&4 2>&1
        popd >&4
    else
        echo "Cloning ${git_url}..." >&2
        {
            git clone --depth 1 --branch "${branch}" "${git_url}" "${branch}"
        } >&4 2>&1
    fi
    popd >&4
}

nenv_make_package_tarball(){
    local version="$1"

    echo "Compiling..." >&4 2>&1
    pushd "$TEMP_PATH" >&4
    {
        ./configure --prefix=$PREFIX_PATH $CONFIGURE_OPTS
        make
        make install
    } >&4 2>&1
    popd >&4
}

nenv_make_package_git(){
    local version="$1"

    echo "Compiling..." >&4 2>&1
    pushd "$NENV_SOURCE_PATH/${version}" >&4
    {
        ./configure --prefix=$PREFIX_PATH $CONFIGURE_OPTS
        make
        ./tools/waf-light install
    } >&4 2>&1
    popd >&4

}

nenv_install_from(){
    local install_type="$1"
    shift 1

    if nenv_installed "$NODE_VERSION"; then
        echo "Already installed: $NODE_VERSION" >&2
        return 0
    fi
    echo "Open log file to ${LOG_PATH}" >&2
    exec 4<> "$LOG_PATH"
    if [ -n "$VERBOSE" ]; then
        tail -f "$LOG_PATH" &
        trap "kill 0" SIGINT SIGTERM EXIT
    fi

    echo "Create temp directory. : ${TEMP_PATH}" >&4 2>&1
    mkdir -p "$TEMP_PATH"
    "nenv_fetch_${install_type}" "$NODE_VERSION" $*
    "nenv_make_package_${install_type}" "$NODE_VERSION" $*
    echo "Remove temp directory. : ${TEMP_PATH}" >&4 2>&1
    rm -rf "$TEMP_PATH"
    nenv-rehash
    return 0
}

nenv_install_package(){
    nenv_install_from "tarball" $*
}

nenv_install_git(){
    nenv_install_from "git" $*
}

usage(){
    {
        nenv---version
        echo "usage: nenv "${0/*nenv-/}" [--verbose] [--debug] [--gdb] VERSION"
    } >&2
}

if [ -z "$TMPDIR" ]; then
    TMP="/tmp"
else
    TMP="${TMPDIR%/}"
fi

parse_options "$@"
unset NODE_VERSION
unset VERBOSE
unset CONFIGURE_OPTS

for argument in "${ARGUMENTS[@]}"; do
    case "$argument" in
        "git")
            {
                # nenv_install_git "master"
                echo "Does not support yet." >&2
                exit 0
            }
            ;;
        *)
            NODE_VERSION="$argument"
            ;;
    esac
done

for option in "${OPTIONS[@]}"; do
    case "$option" in
        "h" | "help" )
            usage
            exit;
            ;;
        "l" | "list" )
            echo "Available versions"
            nenv_remote_versions
            exit;
            ;;
        "verbose" )
            echo "verbose enable"
            VERBOSE=true
            ;;
        "debug" )
            echo "debug enable"
            CONFIGURE_OPTS="${CONFIGURE_OPTS} --debug "
            ;;
        "gdb" )
            echo "gdb enable"
            CONFIGURE_OPTS="${CONFIGURE_OPTS} --gdb "
            ;;
    esac
done

if [ ${#ARGUMENTS[*]} -eq 0 ]; then
    usage
    exit;
fi;

SEED="$(date "+%Y%m%d%H%M%S").$$"
LOG_PATH="${TMP}/node-build.${SEED}.log"
TEMP_PATH="${TMP}/node-build.${SEED}"
PREFIX_PATH="${NENV_ROOT}/versions/${NODE_VERSION}"
NENV_SOURCE_PATH="${NENV_ROOT}/sources"

nenv_install_package $NODE_VERSION ${OPTIONS[*]}
