#!/usr/bin/env bash
#-*- mode: shell-script; coding: utf-8; -*-

set -e
[[ -n $NENV_DEBUG ]] && set -x

source "${NENV_ROOT}/lib/nenv-functions"

NODE_BUILD_ROOT="$(absolute_dirname "$0")/.."

nenv_installed () {
    local version="$1"
    [ -d "$NENV_ROOT/versions/$version/bin" ] || return 1
}

nenv_fetch_tarball(){
    local version="$1"

    local url1="http://nodejs.org/dist/node-v$version.tar.gz"
    local url2="http://nodejs.org/dist/v$version/node-v$version.tar.gz"
    local url3="http://nodejs.org/dist/node-$version.tar.gz"
    local url4="http://nodejs.org/dist/$version/node-$version.tar.gz"

    echo "Now getting tarball. Version : ${version}" >&4 2>&1
    pushd "$TEMP_PATH" >&4
    {
        curl -L "$url1" \
            | $tar zxf - -C "." --strip-components=1 \
            || curl -# -L "$url2" \
            | $tar zxf - -C "." --strip-components=1 \
            || curl -# -L "$url3" \
            | $tar zxf - -C "." --strip-components=1 \
            || curl -# -L "$url4" \
            | $tar zxf - -C "." --strip-components=1
    } >&4 2>&1
    popd >&4
}

nenv_fetch_git(){
    local branch="$1"

    echo "Create git directory : ${NENV_SOURCE_PATH}" >&4 2>&1
    mkdir -p "$NENV_SOURCE_PATH"
    pushd "$NENV_SOURCE_PATH" >&4

    if [ -d "$NENV_SOURCE_PATH/${branch}" ]; then
        echo "Pulling ${git_url}..." >&2
        pushd "$NENV_SOURCE_PATH/${branch}" >&4
        {
            git pull
        } >&4 2>&1
        popd >&4
    else
        echo "Cloning ${git_url}..." >&2
        {
            git clone --depth 1 --branch "${branch}" "${git_url}" "${branch}"
        } >&4 2>&1
    fi
    popd >&4
}

nenv_make_package_tarball(){
    local version="$1"

    echo "Compiling..." >&4 2>&1
    pushd "$TEMP_PATH" >&4
    {
        ./configure --prefix="$PREFIX_PATH"
        make
        make install
    } >&4 2>&1
    popd >&4
}

nenv_make_package_git(){
    local version="$1"

    echo "Compiling..." >&4 2>&1
    pushd "$NENV_SOURCE_PATH/${version}" >&4
    {
        ./configure --prefix="$PREFIX_PATH"
        make
        ./tools/waf-light install
    } >&4 2>&1
    popd >&4

}

nenv_install_from(){
    local install_type="$1"
    local version="$2"
    shift 2

    if nenv_installed "$version"; then
        echo "Already installed: $version" >&2
        return 0
    fi
    echo "Open log file to ${LOG_PATH}" >&2
    exec 4<> "$LOG_PATH"
    if [ -n "$VERBOSE" ]; then
        tail -f "$LOG_PATH" &
        trap "kill 0" SIGINT SIGTERM EXIT
    fi

    echo "Create temp directory. : ${TEMP_PATH}" >&4 2>&1
    mkdir -p "$TEMP_PATH"
    "nenv_fetch_${install_type}" "$version" $*
    "nenv_make_package_${install_type}" "$version" $*
    echo "Remove temp directory. : ${TEMP_PATH}" >&4 2>&1
    rm -rf "$TEMP_PATH"
    nenv-rehash
    return 0
}

nenv_install_package() {
    nenv_install_from "tarball" $*
}

nenv_install_git(){
    nenv_install_from "git" $*
}

if [ -z "$TMPDIR" ]; then
    TMP="/tmp"
else
    TMP="${TMPDIR%/}"
fi

unset NODE_VERSION
unset VERBOSE
if [ $# -ge 1 ]; then
    NODE_VERSION="$1"
    shift 1
    if [ $NODE_VERSION = --verbose ]; then
        VERBOSE=true
        unset NODE_VERSION
        if [ $# -ge 1 ]; then
            NODE_VERSION="$1"
            shift 1
        fi
    fi
fi

SEED="$(date "+%Y%m%d%H%M%S").$$"
LOG_PATH="${TMP}/node-build.${SEED}.log"
TEMP_PATH="${TMP}/node-build.${SEED}"
PREFIX_PATH="${NENV_ROOT}/versions/${NODE_VERSION}"
NENV_SOURCE_PATH="${NENV_ROOT}/source"

case "$NODE_VERSION" in
    "" | -h | --help)
        {
            echo "usage: nenv "${0/*nenv-/}" [--verbose] VERSION"
        } >&2
        exit 1
        ;;
    --command-help )
        nenv versions --remote
        exit;
        ;;
    git)
        {
            # nenv_install_git "master"
            echo "Does not support yet." >&2
            exit 0
        }
        ;;
esac

nenv_install_package $NODE_VERSION $*
